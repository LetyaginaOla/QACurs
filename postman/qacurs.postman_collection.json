{
	"info": {
		"_postman_id": "edd041c4-647e-4bbb-a014-566977e0deba",
		"name": "qacurs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsondata = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsondata.token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "olga",
							"type": "text"
						},
						{
							"key": "pass",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/login",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2.2 Проверка структуры json в ответе\r",
							" var jsonData = pm.response.json();\r",
							"var schema = {\r",
							"           \"type\" : \"object\",\r",
							"        \"required\" : [\"start_qa_salary\",\"qa_salary_after_6_months\", \"qa_salary_after_12_months\"],\r",
							"        \"additionalProperties\": false,\r",
							"        \"properties\" : {\r",
							"            \"start_qa_salary\" : { \"type\" : \"number\"},\r",
							"            \"qa_salary_after_6_months\" : { \"type\" : \"number\"},\r",
							"            \"qa_salary_after_12_months\" : { \"type\" : \"number\"},\r",
							"            \"person\" : {\r",
							"                \"type\" : \"object\",\r",
							"            \r",
							"                \"properties\" : {\r",
							"                    \"u_name\" : {\r",
							"                        \"type\" : \"array\",\r",
							"                        \"user_name\" : {\"type\" : \"string\"},\r",
							"                        \"salary\" : {\"type\" : \"number\"},\r",
							"                        \"age\" : {\"type\" : \"number\"}\r",
							"                    },\r",
							"                \r",
							"                    \"u_age\" : { \"type\" : \"integer\"},\r",
							"                    \"u_salary_1.5_year\" : { \"type\" : \"integer\"}\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"   \r",
							"};\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 2.1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2.3 тесты по проверке правильности результата перемножения на коэффициент\r",
							"var req = JSON.parse(request.data)\r",
							"console.log(req.salary)\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Check salary after_6_months', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"})\r",
							"\r",
							"pm.test('Check salary after_12_months', function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.9);\r",
							"})\r",
							"\r",
							"pm.test('Check salary after_1_5_year', function(){\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"})\r",
							"\r",
							"//2.4 Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса get_test_user\r",
							"\r",
							"let jsondata = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 31,\r\n\"salary\" : 2000,\r\n\"name\" :\"Olga\",\r\n\"auth_token\" :\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://168.119.182.98:5002/user_info",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"user_info"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "salary",
							"value": null,
							"disabled": true
						},
						{
							"key": "name",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "new data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Olga\");\r",
							"});\r",
							"\r",
							"//3.2 Проверка структуры json в ответе\r",
							"var schema = {\r",
							"        \"type\" : \"object\",\r",
							"        \"required\" : [\"name\", \"salary\", \"age\"],\r",
							"        \"additionalProperties\": false,\r",
							"        \"properties\" : {\r",
							"            \"age\" : { \"type\" : \"number\"},\r",
							"            \"salary\" : { \"type\" : \"array\"},\r",
							"         \"name\" : { \"type\" : \"string\"},\r",
							"           \r",
							"        }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3.3 тесты по проверке правильности результата перемножения на коэффициент\r",
							"var req = request.data\r",
							"console.log(req.salary)\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Check salary response*2', function(){\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(req.salary*2);\r",
							"})\r",
							"\r",
							"pm.test('Check salary response*3', function(){\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(req.salary*3);\r",
							"})\r",
							"\r",
							"//3.4 проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test('Test 2nd element above 1st in array', function(){\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.above(Number(jsonData.salary[1]))\r",
							"})\r",
							"pm.test('Test 2nd element above 0st in array', function(){\r",
							"    pm.expect(Number(jsonData.salary[2])).to.be.above(jsonData.salary[0])\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/new_data",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var schema = {\r",
							"    \"items\" : {\r",
							"        \"type\" : \"object\",\r",
							"        \"required\" : [\"name\", \"age\", \"daily_food\", \"daily_sleep\"],\r",
							"        \"additionalProperties\": false,\r",
							"        \"properties\" : {\r",
							"            \"name\" : { \"type\" : \"string\"},\r",
							"            \"age\" : { \"type\" : \"number\"},\r",
							"            \"daily_sleep\" : { \"type\" : \"number\"},\r",
							"            \"daily_food\" : { \"type\" : \"number\"}\r",
							"                }\r",
							"            }\r",
							"        };\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//4.3 weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"\r",
							"console.log(request.data.weight)\r",
							"var jsonData = pm.response.json();\r",
							"var a = request.data.weight;\r",
							"\r",
							"pm.test('Check daily_food = weight * 0.012', function(){\r",
							"    pm.expect(jsonData.daily_food).to.eql(a*0.012);\r",
							"})\r",
							"\r",
							"pm.test('Check daily_sleep = weight * 2.5', function(){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(a*2.5);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "164",
							"type": "text"
						},
						{
							"key": "name",
							"value": "oly",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/test_pet_info",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "oly",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/get_test_user",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//6,1 взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"pm.test(\"Gather random Cur_ID\"),\r",
							"function(){\r",
							"    const resp = pm.response.json();\r",
							"    postman.setEnvironmentVariable(\"Cur_ID\", resp[Math.floor(Math.random()*resp.lenght)].Cur_ID);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/currency",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "27",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/curr_byn",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}